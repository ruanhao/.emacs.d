# -*- mode: snippet -*-
# name: yas_util_debug
# key: yas_util_debug
# --
#ifndef H_DEBUG_MSG_H
#define H_DEBUG_MSG_H

#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>

void h_debug_msg(const char *fmt, ...);

void h_error_msg(const char *fmt, ...);

#define H_DEBUG_MSG(fmt, ...) h_debug_msg("<%s>(%s@%d)[%s]: " \
                                          fmt, __FILE__, __func__, __LINE__, __TIME__, ##__VA_ARGS__)

#define H_ERROR_MSG(fmt, ...) h_error_msg("<%s>(%s@%d)[%s]: " \
                                          fmt, __FILE__, __func__, __LINE__, __TIME__, ##__VA_ARGS__)

#endif /* H_DEBUG_MSG_H */

static void h_do_msg(int errflag, const char *fmt, va_list ap) {
    char *str;
    vasprintf(&str, fmt, ap);
    if (errflag) {
        char *str_with_err;
        asprintf(&str_with_err, "%s: %s", str, strerror(errno));
        free(str);
        fprintf(stderr, "%s\n", str_with_err);
        free(str_with_err);
        return;
    }
    fprintf(stderr, "%s\n", str);
    free(str);
    return;
}

void h_debug_msg(const char *fmt, ...) {
    va_list ap;
    va_start(ap, fmt);
    h_do_msg(0, fmt, ap);
    va_end(ap);
    return;
}

void h_error_msg(const char *fmt, ...) {
    va_list ap;
    va_start(ap, fmt);
    h_do_msg(1, fmt, ap);
    va_end(ap);
    return;
}
