# -*- mode: snippet -*-
# name: yas_sock_tcpv4srv
# key: yas_sock_tcpv4srv
# --
union OPTVAL {
    int            i_val;
    struct linger  linger_val;
    struct timeval timeval_val;
};

struct SOCKOPT {
    int          opt_level;
    int          opt_name;
    union OPTVAL opt_val;
    socklen_t    opt_len;
};

void err_quit(const char *fmt, ...) {
    char *str;
    va_list ap;
    va_start(ap, fmt);
    vasprintf(&str, fmt, ap);
    va_end(ap);
    perror(str);
    free(str);
    exit(1);
}

static void setopts(int sockfd, const struct SOCKOPT *optp) {
    for(; optp->opt_level != 0; optp++) {
        if (setsockopt(sockfd, optp->opt_level, optp->opt_name, &optp->opt_val, optp->opt_len) < 0)
            err_quit("setsockopt() error [level: %d, name: %d]", optp->opt_level, optp->opt_name);
    }
    return;
}

static int initsock(const char *host, in_port_t port) {
    struct sockaddr_in servaddr;
    struct in_addr     inaddr;
    int                sockfd;
    struct SOCKOPT     sockopts[] = {
        {SOL_SOCKET, SO_REUSEADDR, {.i_val = 1}, sizeof(int)},
        {0,          0,            {.i_val = 0}, 0}
    };
    bzero(&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    if (host == NULL)
        servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    else {
        if (inet_aton(host, &inaddr) == 0)
            err_quit("Invalid address for server [%s]", host);
        servaddr.sin_addr = inaddr;
    }
    servaddr.sin_port = htons(port);
    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
        err_quit("socket() error");
    setopts(sockfd, sockopts);
    if (bind(sockfd, (struct sockaddr *) &servaddr, sizeof(servaddr)) < 0)
        err_quit("bind() error");
    listen(sockfd, 5);
    return sockfd;
}

static void loop(int sockfd, void (*worker)(int)) {
    int connfd;
    for ( ; ; ) {
        if ((connfd = accept(sockfd, NULL, NULL)) < 0)
            err_quit("accept() error");
        worker(connfd);
    }
    return;
}

void tcpv4_srv_open(const char *host, in_port_t port, void (*worker)(int)) {
    int                sockfd;
    sockfd = initsock(host, port);
    loop(sockfd, worker);
    return;
}