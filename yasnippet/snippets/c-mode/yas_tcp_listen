# -*- mode: snippet -*-
# name: yas_tcp_listen
# key: yas_tcp_listen
# --
int Tcp_listen(const char *host, const char *service)
{
    int listenfd, n;
    const int on = 1;
    struct addrinfo hints, *res, *head;

    bzero(&hints, sizeof(struct addrinfo));
    hints.ai_flags    = AI_PASSIVE;
    hints.ai_family   = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;

    if ((n = getaddrinfo(host, service, &hints, &res)) != 0)
        err_quit("Tcp_listen() error for %s, %s: %s",
                 host, service, gai_strerror(n));
    head = res;
    do {
        listenfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
        if (listenfd < 0)
            continue;                  /* error, try next one */
        if (setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &on, sizeof(on)) < 0)
            err_quit("setsockopt() for SO_REUSEADDR error");
        if (bind(listenfd, res->ai_addr, res->ai_addrlen) == 0)
            break;                     /* success */
        if (close(listenfd) == -1)     /* bind error, close and try next one */
            err_quit("close() error");
    } while ((res = res->ai_next) != NULL);

    if (res == NULL)    /* errno from final socket() or bind() */
        err_quit("Tcp_listen() error for %s, %s", host, service);

    if (listen(listenfd, 5) < 0)
        err_quit("listen() error");

    freeaddrinfo(head);
    return(listenfd);
}